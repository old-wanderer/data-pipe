group 'andrey.shlykov'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.2.31'
    ext.junit_platform_version = '1.1.0'
    ext.junit_jupiter_version = '5.1.0'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_platform_version"
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'org.junit.platform.gradle.plugin'

    sourceCompatibility = 1.9

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

        compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
        compile group: 'org.ow2.asm', name: 'asm', version: '6.0'

        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
        compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.11.0'

        testCompile "org.junit.platform:junit-platform-console:$junit_platform_version"
        testCompile "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
        testCompile "org.junit.jupiter:junit-jupiter-params:5.1.0-M1"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    }

    repositories {
        mavenCentral()
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    kotlin {
        experimental {
            coroutines "enable"
        }
    }

//    sourceSets {
//        module {
//            java {
//                srcDirs = [srcModule]
//                compileClasspath = main.compileClasspath
//                sourceCompatibility = '9'
//                targetCompatibility = '9'
//            }
//        }
//        main {
//            kotlin { srcDirs += [srcModule] }
//        }
//    }
//
//    compileModuleJava.configure {
//        dependsOn compileKotlin
//        destinationDir = compileKotlin.destinationDir
//        doFirst {
//            options.compilerArgs = ['--module-path', classpath.asPath,]
//            classpath = files()
//        }
//    }
//    jar.dependsOn compileModuleJava

    afterEvaluate {

        compileJava {
            dependsOn(":$moduleName:compileKotlin")
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        compileTestJava {
            dependsOn(":$moduleName:compileTestKotlin")
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'junit',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }
    }
}
