package datapipe.core.data.generator

import datapipe.core.data.model.metadata.*
import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test
import java.util.concurrent.atomic.AtomicInteger

/**
 * @author: Andrei Shlykov
 * @since: 17.03.2018
 */
@Disabled // все тесты не работают последовательно надо либо разбираться либо моки писать на ClassGenerator
class GeneratedClassesCacheTest {

    private val classCounter = AtomicInteger(0)

    @AfterEach
    fun clearCache() = GeneratedClassesCache.clear()

    @Test
    fun plainObject() {
        val metadata = metadataClass {
            + PrimitiveBoolean
            + PrimitiveString
            + PrimitiveLong
            + PrimitiveDouble
        }

        val clazz = GeneratedClassesCache[metadata]
        // Не уверен что хороший способ проверки. TODO Надо подумать
        Assertions.assertEquals(className(classCounter.getAndIncrement()), clazz.name)
        println(classCounter)
    }

    @Test
    fun nestedObject() {
        val metadata = metadataClass {
            + PrimitiveBoolean
            + PrimitiveString
            + PrimitiveLong
            + PrimitiveDouble
            + "nested" to metadataClass {
                + PrimitiveBoolean
                + PrimitiveString
                + PrimitiveLong
                + PrimitiveDouble
            }
        }


        val nestedMetadata = metadata.properties.find { it.name == "nested" }!!.type as MetadataClass

        val first = GeneratedClassesCache[metadata]
        val second = GeneratedClassesCache[nestedMetadata]

        Assertions.assertEquals(className(classCounter.getAndIncrement()), first.name)
        Assertions.assertEquals(className(classCounter.getAndIncrement()), second.name)
    }


    private fun className(number: Int) = "datapipe.core.data.generated.AutoGeneratedClass$number"

}