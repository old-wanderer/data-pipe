package datapipe.core.data.generator

import datapipe.core.data.model.metadata.*
import com.google.gson.annotations.SerializedName
import datapipe.core.data.model.metadata.parser.serialize
import org.objectweb.asm.ClassWriter
import org.objectweb.asm.Opcodes
import org.objectweb.asm.Type
import java.io.File
import java.io.FileOutputStream

/**
 * @author: andrei shlykov
 * @since: 21.01.2018
 */
object ClassGenerator {

    private val GENERATED_CLASS_FULL_NAME = GeneratedClass::class.java.canonicalName.replace(".", "/")
    private val loader = AutoGeneratedClassLoader()

    private var autoNameCounter = 0

    fun generateClassAndSave(metadata: MetadataClass, file: String): Class<GeneratedClass> {
        val className = genClassName()
        val byteCode = generateByteCode(className, metadata)

        val fileWriter = FileOutputStream(File(file))
        fileWriter.write(byteCode)
        fileWriter.close()

        return loadClass(className, byteCode)
    }

    fun generateClass(metadata: MetadataClass): Class<GeneratedClass> {
        val className = "datapipe/core/data/generated/${genClassName()}"
        val byteCode = generateByteCode(className, metadata)
        return loadClass(className, byteCode)
    }

    fun generateByteCode(className: String, metadata: MetadataClass): ByteArray {
        val classWriter = ClassWriter(ClassWriter.COMPUTE_FRAMES)


        classWriter.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC,
                className, null, GENERATED_CLASS_FULL_NAME, null)

        val defaultConstructor = classWriter.visitMethod(Opcodes.ACC_PUBLIC,
                "<init>", "()V", null, null)
        defaultConstructor.visitCode()
        defaultConstructor.visitVarInsn(Opcodes.ALOAD, 0)
        defaultConstructor.visitMethodInsn(Opcodes.INVOKESPECIAL,
                GENERATED_CLASS_FULL_NAME, "<init>", "()V", false)
        defaultConstructor.visitInsn(Opcodes.RETURN)
        defaultConstructor.visitMaxs(1, 1)
        defaultConstructor.visitEnd()

        genStaticMetadataClass(metadata, classWriter, className)

        for (property in metadata.properties) {
            genProperty(property, classWriter)
        }

        classWriter.visitEnd()
        return classWriter.toByteArray()
    }

    private fun loadClass(className: String, byteCode: ByteArray): Class<GeneratedClass> =
            loader.loadNewClass(className.replace("/", "."), byteCode) as Class<GeneratedClass>

    private fun genStaticMetadataClass(metadata: MetadataClass, classWriter: ClassWriter, className: String) {
        classWriter.visitField(
                Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC + Opcodes.ACC_FINAL,
                "_metadata",
                "Ldatapipe/core/data/model/metadata/Metadata;",
                null,
                null
        ).visitEnd()


        val staticConstructor = classWriter.visitMethod(Opcodes.ACC_STATIC, "<clinit>", "()V", null, null)
        staticConstructor.visitCode()
        staticConstructor.visitLdcInsn(serialize(metadata))
        staticConstructor.visitMethodInsn(
                Opcodes.INVOKESTATIC,
                "datapipe/core/data/model/metadata/parser/TokenizeKt",
                "tokenize",
                "(Ljava/lang/String;)Ljava/util/List;",
                false)
        staticConstructor.visitMethodInsn(
                Opcodes.INVOKESTATIC,
                "datapipe/core/data/model/metadata/parser/MetadataTokenKt",
                "buildMetadataAstTree",
                "(Ljava/lang/Iterable;)Ldatapipe/core/data/model/metadata/parser/MetadataAstNode;",
                false
        )
        staticConstructor.visitMethodInsn(
                Opcodes.INVOKESTATIC,
                "datapipe/core/data/model/metadata/parser/MetadataTokenKt",
                "buildMetadata",
                "(Ldatapipe/core/data/model/metadata/parser/MetadataAstNode;)Ldatapipe/core/data/model/metadata/Metadata;",
                false
        )
        staticConstructor.visitFieldInsn(
                Opcodes.PUTSTATIC,
                className,
                "_metadata",
                "Ldatapipe/core/data/model/metadata/Metadata;"
        )
        staticConstructor.visitInsn(Opcodes.RETURN)
        staticConstructor.visitMaxs(2, 2)
        staticConstructor.visitEnd()
    }

    private fun genProperty(propertyMetadata: PropertyMetadata, classWriter: ClassWriter) {
        val field = when (propertyMetadata.type) {
            is MetadataPrimitive -> classWriter.visitField(Opcodes.ACC_PUBLIC,
                    propertyMetadata.name, getRealType(propertyMetadata.type, maybePrimitive = true), null, null)
            is MetadataList -> classWriter.visitField(Opcodes.ACC_PUBLIC,
                    propertyMetadata.name, Type.getDescriptor(List::class.java), getRealType(propertyMetadata.type), null)
            is MetadataClass -> {
                val clazz = generateClass(propertyMetadata.type)
                classWriter.visitField(Opcodes.ACC_PUBLIC, propertyMetadata.name,
                        Type.getDescriptor(clazz), null, null)
            }
            else -> {
                println("WARNING: cant create property not primitive type: ${propertyMetadata.type}")
                return
            }
        }
        // TODO тест на генерацию SerializedName
        if (propertyMetadata.aliasNames.isNotEmpty()) {
            val annotation = field.visitAnnotation(Type.getDescriptor(SerializedName::class.java), true)
            annotation.visit("value", propertyMetadata.aliasNames.first())
            if (propertyMetadata.aliasNames.size > 1) {
                annotation.visit("alternate", propertyMetadata.aliasNames.drop(1).toTypedArray())
            }
            annotation.visitEnd()
        }
        field.visitEnd()
    }

    private fun getRealType(metadata: Metadata, maybePrimitive: Boolean = false): String = when (metadata) {
        PrimitiveString  -> Type.getDescriptor(String::class.java)
        PrimitiveDouble  -> if (maybePrimitive) Type.DOUBLE_TYPE.descriptor  else "Ljava/lang/Double;"
        PrimitiveBoolean -> if (maybePrimitive) Type.BOOLEAN_TYPE.descriptor else "Ljava/lang/Boolean;"
        PrimitiveLong    -> if (maybePrimitive) Type.LONG_TYPE.descriptor    else "Ljava/lang/Long;"
        is MetadataClass -> Type.getDescriptor(generateClass(metadata))
        is MetadataList  -> "Ljava/util/List<${getRealType(metadata.containsType)}>;"
        else -> throw RuntimeException("Don't know type: $metadata")
    }

    private fun genClassName() = "AutoGeneratedClass${autoNameCounter++}"

}